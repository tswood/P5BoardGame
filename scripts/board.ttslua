Board = {}

local _player_1_button_zone = nil
local _player_2_button_zone = nil

function Board:getPlayerOneButtonZone()
  if (_player_1_button_zone == nil) then
    _player_1_button_zone = getObjectFromGUID(PLAYER_1_BUTTONS_GUID)
  end
  return _player_1_button_zone
end

function Board:getPlayerTwoButtonZone()
  if (_player_2_button_zone == nil) then
    _player_2_button_zone = getObjectFromGUID(PLAYER_2_BUTTONS_GUID)
  end
  return _player_2_button_zone
end

function Board:getPlayerButtonZones()
  return {
    [1] = self:getPlayerOneButtonZone(),
    [2] = self:getPlayerTwoButtonZone()
  }
end

function Board:clearPlayerButtons()
  for _, v in ipairs(self:getPlayerButtonZones()) do
    v.clearButtons()
  end
end

local function addTurnButtonToObject(obj)
  Button:addTo(obj, {
    label = 'End Turn',
    click_function = '_btn_EndTurnClick',
    position = Vector:zero():add(vector(0, 0, -0.75))
  })
end

function _btn_EndTurnClick(obj, player_color)
  obj.clearButtons()
  Settings:setPlayerTurnDone(player_color, true)
  Message:gameNotice(Settings:getPlayerObject(player_color).character_name .. ' is done for the day.')

  if Settings:areAllPlayersDone() then
    Settings:setAllPlayersUndone()

    local next_day = Settings:getDay() + 1
    if next_day == 29 then
      Message:gameNotice('Game Over')
      return
    end

    Calendar:setDay(next_day)
    Board:initTurnButtons()
  end
end

function Board:initTurnButtons()
  local zones = self:getPlayerButtonZones()
  for _, v in pairs(Settings:getConfiguredPlayers()) do
    local zone = zones[v.player_number]
    zone.clearButtons()
    addTurnButtonToObject(zone)
  end
end

function Board:setupDrawnAreas()
  local shadow_deck_bounds = Palace:getShadowDeck().getBounds()
  local location_deck_bounds = Locations:getDeck().getBounds()
  local confidant_deck_bounds = Confidants:getDeck().getBounds()
  local palace_entrance_bounds = Util:deepcopy(location_deck_bounds)

  palace_entrance_bounds.center:scale(vector(-1, 1, 1))

  local bounds_for_points = {
    shadow_deck_bounds,
    location_deck_bounds,
    confidant_deck_bounds,
    palace_entrance_bounds
  }

  local points = {}
  for _, v in pairs(bounds_for_points) do
    table.insert(points, Util:merge(v, {
      options = {
        thickness = 0.075,
        color = Color.Red,
        padding = 0.6
      }
    }))
  end

  Util:drawRectangleAroundObjects(Global, points)
end
