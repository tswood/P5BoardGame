Confidant = {}

local _deck_zone = nil

function Confidant:getDeckZone()
  if _deck_zone == nil then
    _deck_zone = getObjectFromGUID(CONFIDANT_CARDS_GUID)
  end
  return _deck_zone
end

function Confidant:getDeck()
  return Zone:getDeckOrCard(self:getDeckZone())
end

function Confidant:shuffle()
  self:getDeck():shuffle()
end

function Confidant:takeFromDeck(character_id, options)
  local deck = self:getDeck()
  for i, v in ipairs(deck.getObjects()) do
    if v.gm_notes == character_id then
      return deck.takeObject(Util:merge(options or {}, { index = i - 1 }))
    end
  end
  return nil
end

function Confidant:removeFromDeck(character_id)
  local item_to_remove = self:takeFromDeck(character_id)
  if item_to_remove ~= nil then
      Bags:getTrashBag().putObject(item_to_remove)
  end
  return item_to_remove
end

function Confidant:prepareDeck()
  function _co_confidant_prepareDeck()
    Util:waitSec(0.75)

    for k, v in pairs(Settings:getConfiguredPlayers()) do
      local player_number = v.player_number
      local character_id = v.character_id
      local target_offset = Settings:getPlayerCharacterCard(k).getPosition() +
                            (player_number == 1 and PLAYER_CARD_CONFIDANT_DROP_OFFSET or PLAYER_CARD_CONFIDANT_DROP_OFFSET * vector(-1, 1, 1))

      if character_id ~= ID.CHAR.JOKER then
        while self:removeFromDeck(character_id) ~= nil do end
      end

      local take_offset = vector(0, 0, 0)
      local padding_offset = vector(DEAL_CARD_PADDING_OFFSET.x, DEAL_CARD_PADDING_OFFSET.y, DEAL_CARD_PADDING_OFFSET.z + 1)
      local options = { rotation = vector(0, 180, 0) }
      local confidant = self:takeFromDeck(character_id, options)
      while confidant ~= nil do
        confidant.setPositionSmooth(target_offset + take_offset, false, true)
        Util:waitSpawning(confidant)
        take_offset:sub(padding_offset)
        confidant = self:takeFromDeck(character_id, options)
      end
    end

    while self:removeFromDeck(ID.CHAR.JOKER) do end
    self:shuffle()

    return 1
  end
  startLuaCoroutine(Global, '_co_confidant_prepareDeck')
end
