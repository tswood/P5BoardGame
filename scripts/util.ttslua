Util = {}

function Util:merge(source, destination)
  for k, v in pairs(source) do destination[k] = v end
  return destination
end

function Util:deepcopy(orig)
  local orig_type = type(orig)
  local copy
  if orig_type == 'table' then
    copy = {}
    for orig_key, orig_value in next, orig, nil do
      copy[self:deepcopy(orig_key)] = self:deepcopy(orig_value)
    end
    setmetatable(copy, self:deepcopy(getmetatable(orig)))
  else -- number, string, boolean, etc
    copy = orig
  end
  return copy
end

function Util:waitFrame(frames)
  for i = 1, frames do
    coroutine.yield(0)
  end
end

function Util:waitSpawning(control)
  while control.spawning do coroutine.yield(0) end
end

function Util:waitSec(time_delay)
  delay_time = delay_time or 1
  local start = os.time()
  repeat coroutine.yield(0) until os.time() > start + delay_time
end

function Util:getTableCount(table_obj)
  local counter = 0
  for k, v in pairs(table_obj) do
    counter = counter + 1
  end
  return counter
end

-- points = { ... , { center = vector(x,y,z), size = vector(x,y,z),
-- options = { color = Color.Black, thickness = 0.5, rotation = vector(x,y,z), padding = 0 }
-- }, ... }
function Util:drawRectangleAroundObjects(owner_obj, points)
  local line_options = {
    color = Color.Black,
    thickness = 0.5,
    rotation = vector(0, 0, 0),
    padding = 0
  }

  local vector_lines = {}
  for _, v in pairs(points) do
    local current_options = Util:merge(line_options, {})
    Util:merge(v.options or {}, current_options)

    local top_z = v.center.z + (v.size.z / 2) + current_options.padding
    local bottom_z = v.center.z - (v.size.z / 2) - current_options.padding
    local left_x = v.center.x - (v.size.x / 2) - current_options.padding
    local right_x = v.center.x + (v.size.x / 2) + current_options.padding

    local line_points = {
      { vector(left_x, 1, top_z), vector(right_x, 1, top_z) },        -- TOP
      { vector(left_x, 1, bottom_z), vector(right_x, 1, bottom_z) },  -- BOTTOM
      { vector(left_x, 1, top_z), vector(left_x, 1, bottom_z) },      -- LEFT
      { vector(right_x, 1, top_z), vector(right_x, 1, bottom_z) }     -- RIGHT
    }

    for _, p in ipairs(line_points) do
      table.insert(vector_lines, Util:merge(current_options, { points = p }))
    end
  end

  owner_obj.setVectorLines(vector_lines)

end

function Util:any(source_table, func)
  for _, v in pairs(source_table) do
    if func(v) then return true end
  end
  return false
end

function Util:all(source_table, func)
  for _, v in pairs(source_table) do
    if not func(v) then return false end
  end
  return true
end

function Util:count(source_table)
  local counter = 0
  for _, v in pairs(source_table) do
    counter = counter + 1
  end
  return counter
end

function Util:indexOf(source_table, func)
  for i, v in ipairs(source_table) do
    if func(v) then return i end
  end
  return -1
end

function Util:where(source_table, func)
  local results = {}
  local is_array = source_table[1] ~= nil
  
  if is_array then
    for i, v in ipairs(source_table) do
      if func(i, v) then table.insert(results, v) end
    end
  else
    for k, v in pairs(source_table) do
      if func(k, v) then results[k] = v end
    end
  end

  return results
end
