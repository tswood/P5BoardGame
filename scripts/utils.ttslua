function gameMessage(message)
  printToAll('#> ' .. message .. ' <#')
end

function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

function merge(source, destination)
  for k, v in pairs(source) do destination[k] = v end
end

function tableCount(currentTable)
  local counter = 0
  for k, v in pairs(currentTable) do counter = counter + 1 end
  return counter
end

function translateVector(original_pos, vector)
  return {
    x = original_pos.x + vector.x,
    y = original_pos.y + vector.y,
    z = original_pos.z + vector.z
  }
end

function wait_frame(frames)
  for i=1,frames do
    coroutine.yield(0)
  end
end

function wait_sec(delay_time)
  delay_time = delay_time or 1
  local start = os.time()
  repeat coroutine.yield(0) until os.time() > start + delay_time
end

function wait_spawning(control)
  while control.spawning do coroutine.yield(0) end
end
